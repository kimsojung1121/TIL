<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyMemberXMLMapper">
	<!-- insert : INSERT 명령을 등록하기 위한 엘리먼트 -->
	<!-- id 속성 : SQL 명령이 등록된 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
	<!-- parameterType 속성 : SQL 명령에 필요한 값이 저장된 Java 자료형을 속성값으로 설정 -->
	<!-- => Java 자료형 대신 typeAlias 엘리먼트에서 설정된 별칭 사용 가능 -->
	<!-- => SQL 명령에 필요한 값이 없는 경우 parameterType 속성 생략 가능 -->
	<!-- DML 명령(INSERT, UPDATE, DELETE) 관련 엘리먼트는 SQL 명령 실행 후 조작행의 갯수를
	무조건 정수값(int)으로 반환하므로 resultType 속성 생략 -->
	<insert id="insertMember" parameterType="MyMember">
		<!-- parameterType 속성으로 전달받은 값은 SQL 명령에서 #{변수명|필드명|맵키} 형식으로 표현 -->
		<!-- => ibatis는 #변수명|필드명|맵키# 형식으로 값을 표현 -->
		insert into mymember values(#{id},#{name},#{phone},#{email})
	</insert>
	
	<!-- update : UPDATE 명령을 등록하기 위한 엘리먼트 -->
	<update id="updateMember" parameterType="MyMember">
		update mymember set name=#{name},phone=#{phone},email=#{email} where id=#{id}
	</update>
	
	<!-- delete : DELETE 명령을 등록하기 위한 엘리먼트 -->
	<delete id="deleteMember" parameterType="string">
		delete from mymember where id=#{id}
	</delete>
	
	<!-- select : SELECT 명령을 등록하기 위한 엘리먼트 -->
	<!-- select 엘리먼트에 등록된 SELECT 명령을 실행하여 검색된 행을 Java 자료형의 
	값 또는 인스턴스로 제공하기 위해 반드시 resultType 속성을 설정 -->
	<!-- resultType 속성 : 검색결과를 제공받기 위한 Java 자료형을 속성값으로 설정 -->
	<!-- => Java 자료형 대신 typeAlias 엘리먼트에서 설정된 별칭 사용 가능 -->
	<!-- resultType 속성값이 DTO 클래스인 경우 검색행을 저장하기 위한 DTO 인스턴스를 생성하고
	검색행의 컬럼값을 같은 이름의 필드에 자동으로 매핑 저장하여 반환 - 자동 매핑 -->
	<select id="selectMember" parameterType="string" resultType="MyMember">
		select * from mymember where id=#{id} <!-- 단일행 검색 -->
	</select>
	
	<select id="selectMemberList" resultType="MyMember">
		select * from mymember order by id <!-- 다중행 검색 -->
	</select>
</mapper>
